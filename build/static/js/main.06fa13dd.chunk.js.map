{"version":3,"sources":["services/contacts.js","App.js","index.js"],"names":["baseUrl","contactService","addNewContact","newContact","axios","post","then","response","data","getAllContacts","get","deleteContact","contactToDelete","delete","id","updateContact","updatedInfo","put","Filter","handler","onChange","PersonForm","props","onSubmit","event","addNameHandler","changeNameHandler","changeNumberHandler","type","Persons","personsToShow","map","person","name","number","text","handleDeleteClick","Button","onClick","Notification","message","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","errorMsg","setMsg","notifType","setNotifType","useEffect","getIndexOf","arr","value","i","length","toLowerCase","includes","target","preventDefault","undefined","setTimeout","nameToAdd","some","oneName","index","window","confirm","updatedPerson","returnedPersons","concat","deletedInfo","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06fa13dd.chunk.js","sourcesContent":["import axios from 'axios'\n// baseURL voi olla suhteellinen osoite, sillä production build viedään samaan hakemistoon backendin kanssa\nconst baseUrl = '/api/persons'\n//const baseUrl = 'http://localhost:3001/api/persons'\n//const baseUrl = 'https://puhelinluettelo-app-2021.herokuapp.com/api/persons'\n\nconst getAllContacts = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst addNewContact = newContact => {\n    const request = axios.post(baseUrl, newContact)\n    return request.then(response => response.data)\n}\n\nconst deleteContact = contactToDelete => {\n    const request = axios.delete(`${baseUrl}/${contactToDelete.id}`)\n    return request.then(response => response.data)\n}\n\nconst updateContact = (id, updatedInfo) => {\n    const request = axios.put(`${baseUrl}/${id}`, updatedInfo)\n    return request.then(response => response.data)\n}\n\nconst contactService = {\n    addNewContact,\n    getAllContacts,\n    deleteContact,\n    updateContact\n}\n\nexport default contactService","import React, { useEffect, useState } from 'react'\n\nimport contactService from './services/contacts'\nimport './App.css'\n\nconst Filter = ({handler}) => {\n  return (\n    <div>\n      filter shown with <input onChange={handler} />\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={(event) => {props.addNameHandler(event)}}>\n      <div>\n        name: <input onChange={props.changeNameHandler} />\n      </div>\n      <div>\n        number: <input onChange={props.changeNumberHandler} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = (props) => {\n  return (\n    <div>\n      {props.personsToShow.map(person => \n          <p key={person.id}>{person.name} {person.number} \n          <Button text=\"Delete\" handleDeleteClick={person => props.handleDeleteClick(person)} person={person} /></p>)}\n    </div>\n  )\n}\n\nconst Button = ({text, handleDeleteClick, person}) => {\n  return (\n    <button onClick={() => handleDeleteClick(person)}>{text}</button>\n  )\n}\n\nconst Notification = ({message, type}) => {\n  if (message === null)\n    return null\n\n  return (\n    <div className={type}>\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState()\n  const [ newNumber, setNewNumber ] = useState()\n  const [ filter, setFilter ] = useState('')\n  const [ errorMsg, setMsg ] = useState()\n  const [ notifType, setNotifType ] = useState()\n\n  useEffect(() => {\n    contactService\n      .getAllContacts()\n      .then(persons => \n        setPersons(persons))\n  }, [])\n\n  const addNew = (event) => {\n    event.preventDefault()\n\n    if (newName === undefined || newNumber === undefined) {\n      setMsg('Unable to add new contact; name or number missing')\n      setNotifType('errorNotif')\n      setTimeout(() => {\n        setMsg(null)\n      }, 5000)\n    }\n    else {\n      const nameToAdd = {\n        name: newName,\n        number: newNumber\n      }\n  \n      if (!persons.some(oneName => oneName.name === nameToAdd.name)) {\n        // setPersons(persons.concat(nameToAdd))\n        contactService\n          .addNewContact(nameToAdd)\n          .then(returnedPersons => {\n            setPersons(persons.concat(returnedPersons))\n            setMsg(`Added ${nameToAdd.name}`)\n            setNotifType('successNotif')\n            setTimeout(() => {\n              setMsg(null)\n            }, 5000)\n          })\n      }\n      else {\n        let index = getIndexOf(persons, nameToAdd.name)\n        let id = persons[index].id\n  \n        if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n          // Saadaan vastauksena suoraan response.data, eli voidaan käyttää tässä tulosta suoraan\n          contactService\n            .updateContact(id, nameToAdd)\n            .then(updatedPerson => {\n              setPersons(persons.map(person => person.id !== id ? person : updatedPerson))\n              setMsg(`Updated ${updatedPerson.name}`)\n              setNotifType('successNotif')\n              setTimeout(() => {\n                setMsg(null)\n              }, 5000)\n            })\n        }\n      }\n    }\n  }\n\n  const getIndexOf = (arr, value) => {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].name === value)\n        return i\n    }\n\n    return -1\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const handleDeleteClick = (contactToDelete) => {\n    // Täytyy ottaa poistetun olion info kopiona, sillä jos viittaa errorissa contactToDelete-olioon, tulee object Object\n    const deletedInfo = {...contactToDelete}\n\n    if (window.confirm(`Delete ${contactToDelete.name}?`))\n      contactService.deleteContact(contactToDelete)\n        .then(() => {\n          setPersons(persons.filter(person => person.id !== contactToDelete.id))\n          setMsg(`Deleted ${contactToDelete.name}`)\n          setNotifType('errorNotif')\n          setTimeout(() => {\n            setMsg(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setMsg(`Information of ${deletedInfo.name} has already been removed from the server`)\n          setNotifType('errorNotif')\n          setTimeout(() => {\n            setMsg(null)\n          }, 5000)\n        })\n  }\n\n  // Jos hakukenttä on tyhjä, näytä kaikki yhteystiedot\n  // Muussa tapauksessa suodata yhteystiedot hakusanan avulla\n  const personsToShow = filter === ''\n    ? persons\n    : persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMsg} type={notifType} />\n      <Filter handler={handleFilterChange} />\n      <h3>Add a new</h3>\n      <PersonForm changeNameHandler={handleNameChange} changeNumberHandler={handleNumberChange} addNameHandler={addNew} />\n      <h3>Numbers</h3>\n      <Persons personsToShow={personsToShow} handleDeleteClick={person => handleDeleteClick(person)} />\n    </div>\n  )\n\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}